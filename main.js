!function(){"use strict";const e=document.querySelector(".profile-info__edit-button"),t=(document.querySelector(".profile-info__name"),document.querySelector(".profile-info__subtitle"),document.querySelector(".modal__name"),document.querySelector(".modal__description"),document.querySelector(".add-button")),s=document.querySelector(".profile__avatar-hover-button"),r={cardSection:".gallery__cards",cardTemplate:".card-template",previewPopup:".image-pop-up",profileModal:".profile-modal",addCardModal:".new-item-modal",changeAvatarForm:".change-avatar-form"},i={formInputTypeErrorClass:"form__input_type_error",formInputErrorActiveClass:"form__input-error_active",formInputSelector:".form__input",formSubmitSelector:".form__submit",formSubmitInactiveClass:"form__submit_inactive",formSelector:".form"};class n{constructor(e,t,s,r,i,n,o){this._name=e.name,this._link=e.link,this._id=e._id,this._likes=e.likes,this._cardSelector=s,this._handleCardClick=r,this._handleDeleteClick=i,this._handleLikeClick=n,this._loadingLikeCheck=o,this._userId=t,this._userCardOwnerId=e.owner._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}setCardEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}_handleImageClick(){this._handleCardClick(this._name,this._link)}deleteCard(){this._cardElement.remove(),this._cardElement=null}updateLikes(e){this._likes=e,this.renderLikes()}renderLikes(){this._cardLikes.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like-button-active"):this._likeButton.classList.remove("card__like-button-active")}isLiked(){return this._likes.some((e=>e._id===this._userId))}getView(){return this._cardElement=this._getTemplate(),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._imageModal=this._cardElement.querySelector(".image-pop-up"),this._cardLikes=this._cardElement.querySelector(".card__counter"),this.renderLikes(),this._userId!=this._userCardOwnerId&&this._deleteButton.remove(),this.setCardEventListeners(),this._cardElement}}var o=class{constructor(e,t){this._inputSelector=e.formInputSelector,this._submitButtonSelector=e.formSubmitSelector,this._inactiveButtonClass=e.formSubmitInactiveClass,this._inputErrorClass=e.formInputTypeErrorClass,this._errorClass=e.formInputErrorActiveClass,this._form=t}_setEventListeners(){this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(e){const t=this._form.querySelector(`.${e.id}-error`);console.log(e),console.log(e.id),console.log(this._form),e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)):(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass))}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}};class a{constructor(e,t){let{renderer:s,items:r}=e;this._renderer=s,this._initialArray=r,this._container=document.querySelector(t)}renderItems(){this._initialArray.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class l{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscUp=this._handleEscUp.bind(this)}open(){this._popupElement.classList.add("modal__open"),document.addEventListener("keyup",this._handleEscUp)}close(){this._popupElement.classList.remove("modal__open"),document.removeEventListener("keyup",this._handleEscUp)}_handleEscUp(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("close-icon"))&&this.close()}))}}class c extends l{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".form"),this._handleFormSubmit=s,this._inputList=this._popupForm.querySelectorAll(".form__input"),this._saveButton=this._popupForm.querySelector(".form__submit")}renderLoading(e,t){this._saveButton.textContent=e?"Saving...":t}close(){super.close(),this._popupForm.reset()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),console.log(this._getInputValues())}))}}const d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getAPIInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteUserCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"bc327ce1-4668-42e6-9a70-be158cef63f8","Content-Type":"application/json"}}),h=new o(i,document.querySelector(".modal__form")),u=new o(i,document.querySelector(".new-item-modal__form")),_=new o(i,document.querySelector(".change-avatar-form__form"));h.enableValidation(),u.enableValidation(),_.enableValidation();const m=new class extends l{constructor(e){super({popupSelector:e})}open(e,t){this._image=this._popupElement.querySelector(".image-pop-up__image"),this._imagePopUpTitle=this._popupElement.querySelector(".image-pop-up__title"),this._imagePopUpTitle.textContent=e,this._image.src=t,this._image.alt=e,super.open()}}(r.previewPopup,(function(e,t){m.open(e,t)}));m.setEventListeners();const p=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,userAvatar:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._userAvatar=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}setAvatar(e){console.log(e),this._userAvatar.textContent=e.name,this._userAvatar.src=e}getAvatar(){return this._userAvatar.src}}({nameSelector:".profile-info__name",descriptionSelector:".profile-info__subtitle",userAvatar:".profile__avatar"});console.log(document.querySelector(".profile-info__subtitle").textContent);const f=new class extends l{constructor(e){var t,s,r;super({popupSelector:e}),t=this,r=e=>{e.preventDefault(),this._handleConfirm()},(s=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(s="_handleSubmit"))in t?Object.defineProperty(t,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[s]=r,this._popupForm=this._popupElement.querySelector(".form"),this._confirmButton=this._popupForm.querySelector(".confirm-popup__button"),this._saveButton=this._popupForm.querySelector(".form__submit")}setSubmitAction(e){this._handleConfirm=e}renderLoading(e){this._saveButton.textContent=e?"Loading...":"Yes"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}}(".confirm-popup");let v,g;f.setEventListeners();const E=new c({popupSelector:r.profileModal,handleFormSubmit:e=>{E.renderLoading(!0),d.updateProfileInfo(e).then((e=>{console.log(e),p.setUserInfo(e),E.close()})).catch((e=>{console.log(e)})).finally((()=>{E.renderLoading(!1,"Save")}))}});function S(e){const t=new n(e,g,r.cardTemplate,((e,t)=>{m.open(e,t)}),(e=>{f.open(),f.setSubmitAction((()=>{f.renderLoading(!0),d.deleteUserCard(e).then((()=>{t.deleteCard(),f.close()})).catch((e=>{console.log(e)})).finally((()=>{f.renderLoading(!1)}))}))}),(e=>{t.isLiked()?d.removeCardLikes(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>{console.log(e)})):d.addCardLikes(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>{console.log(e)}))}));return t}E.setEventListeners(),d.getAPIInfo().then((e=>{let[t,s]=e;console.log(t),g=t._id,p.setUserInfo(t),p.setAvatar(t.avatar),v=new a({items:s,renderer:e=>{const t=S(e);v.addItem(t.getView())}},r.cardSection),v.renderItems()})).catch((e=>{console.log(e)}));const b=new c({popupSelector:r.addCardModal,handleFormSubmit:e=>{b.renderLoading(!0),d.addNewCard(e).then((e=>{const t=S(e);b.close(),v.addItem(t.getView())})).catch((e=>{console.log(e)})).finally((()=>{b.renderLoading(!1,"Create")}))}});b.setEventListeners(),s.addEventListener("click",(function(){_.resetValidation(),L.open()}));const L=new c({popupSelector:r.changeAvatarForm,handleFormSubmit:e=>{console.log(e),L.renderLoading(!0),d.updateProfileAvatar(e.avatar).then((e=>{p.setAvatar(e.avatar),L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.renderLoading(!1,"save")}))}});L.setEventListeners(),e.addEventListener("click",(function(){const e=p.getUserInfo();h.resetValidation(),E.setInputValues(e),E.open()})),t.addEventListener("click",(function(){u.resetValidation(),b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,